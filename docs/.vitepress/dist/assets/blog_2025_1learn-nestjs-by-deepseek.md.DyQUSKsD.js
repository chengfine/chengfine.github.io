import{_ as e,c as i,o as n,ae as t}from"./chunks/framework.Dh1jimFm.js";const k=JSON.parse('{"title":"【跟着 deepseek 学 NestJS】依赖注入和控制反转","description":"","frontmatter":{},"headers":[],"relativePath":"blog/2025/1learn-nestjs-by-deepseek.md","filePath":"blog/2025/1learn-nestjs-by-deepseek.md"}'),o={name:"blog/2025/1learn-nestjs-by-deepseek.md"};function r(a,s,l,p,c,d){return n(),i("div",null,s[0]||(s[0]=[t(`<h1 id="【跟着-deepseek-学-nestjs】依赖注入和控制反转" tabindex="-1">【跟着 deepseek 学 NestJS】依赖注入和控制反转 <a class="header-anchor" href="#【跟着-deepseek-学-nestjs】依赖注入和控制反转" aria-label="Permalink to &quot;【跟着 deepseek 学 NestJS】依赖注入和控制反转&quot;">​</a></h1><hr><blockquote><p>依赖注入的核心是将依赖对象的创建和绑定转移到外部容器，而不是在类内部直接new出来。比如，如果一个服务类需要用到数据库连接，传统方式可能是在服务内部实例化数据库连接，但DI则是通过构造函数或属性来自动注入这个连接实例。这样做的好处是解耦，方便测试和替换。</p></blockquote><blockquote><p>控制反转则是更广泛的概念，指的是将程序的控制权交给框架或容器，而不是由开发者直接控制。比如在Nest.js中，框架负责管理对象的生命周期和依赖关系，而不是开发者手动处理。IoC容器是实现这种模式的关键，它自动处理依赖的创建和注入。</p></blockquote><blockquote><p>前端的例子来类比。比如，假设有一个前端组件需要获取数据，传统方式可能在组件内部直接调用API，但使用DI的话，可以将数据获取的服务通过props或context注入，这样组件不关心数据来源，只需使用即可。这类似于React的Context API或Angular的依赖注入系统。</p></blockquote><blockquote><p>可能你会混淆DI和IoC，需要明确它们的关系：<strong>IoC是设计原则，DI是实现IoC的一种方式</strong>。另外，用户可能想知道为什么Nest.js要用这些概念，可能是因为模块化、可测试性和可维护性，所以需要强调这些优点。</p></blockquote><blockquote><p>还要注意实际应用场景，作为前端开发者，可能更关注如何组织代码、管理服务、模块化等。</p></blockquote><h3 id="_1-依赖注入-di-dependency-injection-你点外卖-而不是自己买菜做饭" tabindex="-1"><strong>1. 依赖注入（DI-Dependency Injection）：你点外卖，而不是自己买菜做饭</strong> <a class="header-anchor" href="#_1-依赖注入-di-dependency-injection-你点外卖-而不是自己买菜做饭" aria-label="Permalink to &quot;**1. 依赖注入（DI-Dependency Injection）：你点外卖，而不是自己买菜做饭**&quot;">​</a></h3><p>想象你在家突然想喝奶茶，你有两种选择：</p><ul><li><strong>自己在家做（传统做法）</strong>：你得去买茶叶、奶、糖，准备工具……最后还要洗杯子。</li><li><strong>点外卖（依赖注入）：</strong> 你直接下单，外卖小哥把奶茶送上门。你不需要关心奶茶是怎么做的，只需要“接收”它。</li></ul><p><strong>DI 的核心思想就和点外卖一样：</strong></p><ul><li>在代码中，<strong>“依赖”是一个对象需要另一对象（比如 A 类需要用到 B 类的功能）。</strong></li><li><strong>传统代码：</strong> A 类自己创建一个 B 类的实例（自己买菜做饭）。</li><li><strong>依赖注入：</strong> 把 B 类的实例直接“塞”给 A 类用（外卖小哥送上门）。</li></ul><p><strong>在 Nest.js 里的体现：</strong></p><ul><li>比如一个 <code>UserController</code> 需要调用 <code>UserService</code>，不需要自己在 Controller 里 <code>new UserService()</code>。</li><li>Nest 会自动创建 <code>UserService</code> 的实例，并把它“注入”到 <code>UserController</code> 中（通过构造函数或装饰器）。</li></ul><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// UserController 不用自己创建 UserService</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;users&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> userService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 服务被自动注入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><hr><h3 id="_2-控制反转-ioc-inversion-of-control-遥控器交给-框架" tabindex="-1"><strong>2. 控制反转（IoC-Inversion of Control）：遥控器交给“框架”</strong> <a class="header-anchor" href="#_2-控制反转-ioc-inversion-of-control-遥控器交给-框架" aria-label="Permalink to &quot;**2. 控制反转（IoC-Inversion of Control）：遥控器交给“框架”**&quot;">​</a></h3><p><strong>IoC 的核心思想是：</strong> 把创建和管理对象的控制权交给框架或容器，而不是自己控制。</p><p>假设你在前端用 React：</p><ul><li><strong>传统 jQuery 开发</strong>：你需要手动操作 DOM（比如 <code>$(&#39;#btn&#39;).on(&#39;click&#39;, ...)</code>），代码的控制权在你手里。</li><li><strong>React 的“控制反转”</strong>：你只写组件和状态，React 负责更新 DOM。控制权在 React 框架手中。</li></ul><p><strong>在 Nest.js 中的体现：</strong></p><ul><li><strong>传统开发</strong>：你在代码里手动 <code>new</code> 对象、管理依赖关系。</li><li><strong>使用 IoC 后</strong>：Nest 框架负责创建所有对象（比如 Service、Controller），并自动处理它们之间的关系（谁依赖谁）。</li></ul><p><strong>IoC 容器就像一个“对象工厂”</strong>，你只需要告诉它：“我需要一个 UserService”，它会自动生成好并传递给你。</p><hr><h3 id="di-和-ioc-的关系" tabindex="-1"><strong>DI 和 IoC 的关系：</strong> <a class="header-anchor" href="#di-和-ioc-的关系" aria-label="Permalink to &quot;**DI 和 IoC 的关系：**&quot;">​</a></h3><ul><li><strong>依赖注入是实现控制反转的一种方式。</strong></li><li>通过 IoC（框架掌握控制权），再由 DI（自动注入依赖）来具体实现。</li></ul><hr><h3 id="简单总结-为什么用它们" tabindex="-1"><strong>简单总结：为什么用它们？</strong> <a class="header-anchor" href="#简单总结-为什么用它们" aria-label="Permalink to &quot;**简单总结：为什么用它们？**&quot;">​</a></h3><ol><li><strong>解耦代码：</strong> 类不需要关心依赖对象如何创建，更容易维护。</li><li><strong>方便测试：</strong> 可以轻松替换依赖的模拟对象（比如 Mock 数据）。</li><li><strong>统一管理：</strong> Nest 框架帮你在启动时自动装配所有对象的关系。</li></ol><hr><h3 id="前端对比-组件依赖-props" tabindex="-1"><strong>前端对比：组件依赖 props</strong> <a class="header-anchor" href="#前端对比-组件依赖-props" aria-label="Permalink to &quot;**前端对比：组件依赖 props**&quot;">​</a></h3><p>假设你有一个 <code>UserList</code> 组件需要 <code>userData</code>：</p><ul><li><strong>传统方式：</strong> <code>UserList</code> 自己发请求获取数据。</li><li><strong>DI 方式：</strong> 父组件通过 <code>props</code> 传递 <code>userData</code> 给 <code>UserList</code>。</li></ul><p>在 Nest.js 中，框架就像“全局的父组件”，帮你自动传递所有依赖的“props”（Service）给需要的类。这样就实现了代码的高内聚、低耦合！</p>`,34)]))}const g=e(o,[["render",r]]);export{k as __pageData,g as default};
